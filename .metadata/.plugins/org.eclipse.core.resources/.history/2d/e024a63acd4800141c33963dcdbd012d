package com.nanospark.cnc;

import java.util.ArrayList;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Spinner;
import android.widget.Toast;

public class ContactCreateActivity extends Activity implements
		OnItemSelectedListener {
	EditText nameET;
	EditText phoneET;
	EditText emailET;
	Button contactCancelBtn;
	Button contactCreateBtn;
	Spinner carrierSpinner;
	GlobalData globaldata = GlobalData.getInstance();
	String selectedSpinnerItem = null;
	ArrayList<MachineProfile> assignedProfilesForContactList = new ArrayList<MachineProfile>();
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.contact_creation_layout);
		nameET = (EditText) findViewById(R.id.contactNameET);
		phoneET = (EditText) findViewById(R.id.contactPhoneET);
		emailET = (EditText) findViewById(R.id.contactEmailET);
		carrierSpinner = (Spinner) findViewById(R.id.contactCarrierSpinner);
		contactCancelBtn = (Button) findViewById(R.id.contactLayoutCancelBtn);
		contactCreateBtn = (Button) findViewById(R.id.contactLayoutCreateBtn);

		// check to see if this is an edit event
		Bundle extras = getIntent().getExtras();
		if (extras != null) {
			int position = extras.getInt("edit");

			nameET.setText(globaldata.getContactInfoList().get(position)
					.getName().toString());
			phoneET.setText(globaldata.getContactInfoList().get(position)
					.getPhoneNum().toString());
			emailET.setText(globaldata.getContactInfoList().get(position)
					.getEmail().toString());
		}

		contactCancelBtn.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				Intent myCancelIntent = new Intent(ContactCreateActivity.this,
						MainActivity.class);
				startActivity(myCancelIntent);
			}
		});

		contactCreateBtn.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				boolean contactInUse = false;
				Bundle extras = getIntent().getExtras();
				if (extras != null) {
					int position = extras.getInt("edit");
					
					//Check to see if contact is attached to any machine profiles
					if(globaldata.getContactInfoList().get(position).getAssignedProfiles().equals(null)){
						globaldata.getContactInfoList().remove(position);
					}
					else{
						assignedProfilesForContactList = globaldata.getContactInfoList().get(position).getAssignedProfiles();
						contactInUse=true;
					}
				}

				if (!nameET.getText().toString().equals(null)
						&& !nameET.getText().toString().equals("")
						&& !phoneET.getText().toString().equals(null)
						&& !phoneET.getText().toString().equals("")
						&& !emailET.getText().toString().equals(null)
						&& !emailET.getText().toString().equals("")
						&& !selectedSpinnerItem.equals(null)) {
					if(!contactInUse){
					globaldata.getContactInfoList().add(
							new ContactInfo(phoneET.getText().toString(),
									nameET.getText().toString(), emailET
											.getText().toString(),
									selectedSpinnerItem,null));
					}
					
					if(contactInUse){
						ContactInfo myEditedContact = new ContactInfo(phoneET.getText().toString(),
								nameET.getText().toString(), emailET
								.getText().toString(),
						selectedSpinnerItem,assignedProfilesForContactList);
						globaldata.getContactInfoList().add(myEditedContact);
						//Iterate through the current machine profiles and update with the newly created contact.
						//First iterate through the machine profile list
						for(int z = 0; z < globaldata.getMachineProfileList().size(); z++){
							//Next iterate through the edited contact's assigned profile list
							for(int y = 0; y < myEditedContact.getAssignedProfiles().size();y++){
								//Check if any of the assigned profiles and the machine profiles match eachother
								if(globaldata.getMachineProfileList().get(z).equals(myEditedContact.getAssignedProfiles().get(y))){
									//if a match is found; change the machine profile list to have a new contact attached.
									globaldata.getMachineProfileList().get(z).setAttachedContact(myEditedContact);
								}
							}
						
							
						}
					}
					Intent myReturnintent = new Intent(
							ContactCreateActivity.this, MainActivity.class);
					startActivity(myReturnintent);
				} else {
					Toast.makeText(getBaseContext(),
							"You are missing a parameter!", Toast.LENGTH_LONG)
							.show();
				}
			}
		});
		ArrayAdapter<CharSequence> carrierAdapter = ArrayAdapter
				.createFromResource(this, R.array.carrier_options,
						android.R.layout.simple_spinner_item);
		carrierAdapter
				.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);

		carrierSpinner.setAdapter(carrierAdapter);

		carrierSpinner.setOnItemSelectedListener(this);

	}

	@Override
	public void onItemSelected(AdapterView<?> parent, View view, int pos,
			long id) {
		selectedSpinnerItem = (String) parent.getItemAtPosition(pos);

	}

	@Override
	public void onNothingSelected(AdapterView<?> parent) {

	}
}
